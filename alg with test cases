using System;
using System.Diagnostics.Metrics;
using System.Globalization;
using System.Text;

class Program
{
    static void Main(string[] args)
    {
        Console.Write("Enter the number of rows (N): ");
        int n = int.Parse(Console.ReadLine());
        Console.Write("Enter the number of columns (M): ");
        int m = int.Parse(Console.ReadLine());
        Console.Write("Enter the value of K: ");
        int k = int.Parse(Console.ReadLine());
        Console.Write("Enter the value of L: ");
        int l = int.Parse(Console.ReadLine());
        Console.Write("range of ramdom numbers in matrix  ");
        int chislo = int.Parse(Console.ReadLine());
        int[,] matrix = new int[n, m];
        Random rnd = new Random();
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                matrix[i, j] = rnd.Next(chislo);
            }
        }
        Console.WriteLine("Original Matrix:");
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                if (matrix[i, j] / k < l)
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                }
                else
                {
                    Console.ResetColor();
                }
                Console.Write("{0, 4}", matrix[i, j]);
            }
            Console.WriteLine();
        }

        Console.ResetColor();


        for (int i = 0; i < n; i++)
        {
            bool swapped = true;
            int gap = m;
            while (gap > 1 || swapped)
            {
                gap = (int)(gap / 1.3);
                if (gap == 0 || gap == 1)
                {
                    gap = 1;
                }
                int j = 0;
                swapped = false;
                while (j + gap < m)
                {
                    if (matrix[i, j] / k < l && matrix[i, j + gap] / k < l)
                    {
                        if (matrix[i, j] > matrix[i, j + gap])
                        {
                            Swap(matrix, i, j, j + gap);
                            swapped = true;
                        }

                    }
                    j++;
                }
            }
        }
        Console.WriteLine("Sorted Matrix:");
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                if (matrix[i, j] / k < l)
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                }
                else
                {
                    Console.ResetColor();
                }
                Console.Write("{0, 4}", matrix[i, j]);
            }
            Console.WriteLine();
        }

        Console.ResetColor();
    }

    static void Swap(int[,] matrix, int row, int i, int j)
    {
        int temp = matrix[row, i];
        matrix[row, i] = matrix[row, j];
        matrix[row, j] = temp;
    }


}


/*Enter the number of rows (N): 5
Enter the number of columns (M): 5
Enter the value of K: 8
Enter the value of L: 10
range of ramdom numbers in matrix  25
Original Matrix:
  21  23  11   9  15
  20  20  17   4  12
  21  12  17   9  13
   8  23  11  16  20
   7   8   2  16   8
Sorted Matrix:
   9  11  15  21  23
   4  12  17  20  20
   9  12  13  17  21
   8  11  16  20  23
   2   7   8   8  16

Enter the number of rows (N): 10
Enter the number of columns (M): 10
Enter the value of K: 25
Enter the value of L: 50
range of ramdom numbers in matrix  100
Original Matrix:
  90  32  48  90  94  35  99  11  38  57
  32  60  79  26   5  66  72  64  35  35
  83  32  46  86  70  45  32  13  30  90
  45  31  58  89  61  47  92  59  97  27
  20  54  50  28  42   6   7  96   1  48
  61  28   9  62  27  25   2  53  27  25
  30  31  20  55   5  49  97  38  60  72
  77  49  18  19  97  43  22  79  93  95
  34  24  19  13  40   6   3  53  64  54
  22  12  96   7  41  12  94  57  69  51
Sorted Matrix:
  11  32  35  38  48  57  90  90  94  99
   5  26  32  35  35  60  64  66  72  79
  13  30  32  32  45  46  70  83  86  90
  27  31  45  47  58  59  61  89  92  97
   1   6   7  20  28  42  48  50  54  96
   2   9  25  25  27  27  28  53  61  62
   5  20  30  31  38  49  55  60  72  97
  18  19  22  43  49  77  79  93  95  97
   3   6  13  19  24  34  40  53  54  64
   7  12  12  22  41  51  57  69  94  96

Enter the number of rows (N): 10
Enter the number of columns (M): 10
Enter the value of K: 5
Enter the value of L: 15
range of ramdom numbers in matrix  100
Original Matrix:
  25  43  17  13  10  56  62  42  39  61
  74  63  73  28   0   4  79  70  96   4
  33  29  27  98  90  33  48  18  28  16
  93  70  18  43  20  69  41  72  49  25
  38   5  85  15  28  78  90  95  17  93
   5  43  30  84  70  96  94  18   0  18
  51  53  10  27  68  82  28  15  82  99
  77   4  43  64  20  99  69   8  34  73
   7  89   0  68  56  26  64  37  16   5
  41   4  19  61  20  97  74  33  33  43
Sorted Matrix:
  10  13  17  25  39  42  43  56  61  62
   0   4   4  28  63  70  79  73  96  74
  16  18  28  98  90  27  29  33  33  48
  93  18  20  25  41  43  49  69  70  72
   5  15  85  28  38  78  90  95  17  93
   0   5  18  84  18  96  94  30  43  70
  10  15  27  28  51  82  53  68  82  99
  77   4   8  20  34  99  43  64  69  73
   0  89   5   7  16  26  37  56  64  68
   4  19  20  33  33  97  41  43  61  74

*/
